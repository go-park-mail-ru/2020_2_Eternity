// Code generated by MockGen. DO NOT EDIT.
// Source: auth.pb.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	auth "github.com/go-park-mail-ru/2020_2_Eternity/pkg/proto/auth"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAuthServiceClient is a mock of AuthServiceClient interface
type MockAuthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceClientMockRecorder
}

// MockAuthServiceClientMockRecorder is the mock recorder for MockAuthServiceClient
type MockAuthServiceClientMockRecorder struct {
	mock *MockAuthServiceClient
}

// NewMockAuthServiceClient creates a new mock instance
func NewMockAuthServiceClient(ctrl *gomock.Controller) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthServiceClient) EXPECT() *MockAuthServiceClientMockRecorder {
	return m.recorder
}

// CheckCookie mocks base method
func (m *MockAuthServiceClient) CheckCookie(ctx context.Context, in *auth.Check, opts ...grpc.CallOption) (*auth.UserID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckCookie", varargs...)
	ret0, _ := ret[0].(*auth.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCookie indicates an expected call of CheckCookie
func (mr *MockAuthServiceClientMockRecorder) CheckCookie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCookie", reflect.TypeOf((*MockAuthServiceClient)(nil).CheckCookie), varargs...)
}

// Login mocks base method
func (m *MockAuthServiceClient) Login(ctx context.Context, in *auth.LoginReq, opts ...grpc.CallOption) (*auth.LoginInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*auth.LoginInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockAuthServiceClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceClient)(nil).Login), varargs...)
}

// MockAuthServiceServer is a mock of AuthServiceServer interface
type MockAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceServerMockRecorder
}

// MockAuthServiceServerMockRecorder is the mock recorder for MockAuthServiceServer
type MockAuthServiceServerMockRecorder struct {
	mock *MockAuthServiceServer
}

// NewMockAuthServiceServer creates a new mock instance
func NewMockAuthServiceServer(ctrl *gomock.Controller) *MockAuthServiceServer {
	mock := &MockAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthServiceServer) EXPECT() *MockAuthServiceServerMockRecorder {
	return m.recorder
}

// CheckCookie mocks base method
func (m *MockAuthServiceServer) CheckCookie(arg0 context.Context, arg1 *auth.Check) (*auth.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCookie", arg0, arg1)
	ret0, _ := ret[0].(*auth.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCookie indicates an expected call of CheckCookie
func (mr *MockAuthServiceServerMockRecorder) CheckCookie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCookie", reflect.TypeOf((*MockAuthServiceServer)(nil).CheckCookie), arg0, arg1)
}

// Login mocks base method
func (m *MockAuthServiceServer) Login(arg0 context.Context, arg1 *auth.LoginReq) (*auth.LoginInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*auth.LoginInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockAuthServiceServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceServer)(nil).Login), arg0, arg1)
}
