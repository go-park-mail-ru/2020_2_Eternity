// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: pkg/proto/chat/chat.proto

package chat

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ChatCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName       string `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
	CollocutorName string `protobuf:"bytes,2,opt,name=CollocutorName,proto3" json:"CollocutorName,omitempty"`
}

func (x *ChatCreateReq) Reset() {
	*x = ChatCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_chat_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCreateReq) ProtoMessage() {}

func (x *ChatCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_chat_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCreateReq.ProtoReflect.Descriptor instead.
func (*ChatCreateReq) Descriptor() ([]byte, []int) {
	return file_pkg_proto_chat_chat_proto_rawDescGZIP(), []int{0}
}

func (x *ChatCreateReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ChatCreateReq) GetCollocutorName() string {
	if x != nil {
		return x.CollocutorName
	}
	return ""
}

type MarkMessagesReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId   int32  `protobuf:"varint,1,opt,name=ChatId,proto3" json:"ChatId,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
}

func (x *MarkMessagesReadReq) Reset() {
	*x = MarkMessagesReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_chat_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkMessagesReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkMessagesReadReq) ProtoMessage() {}

func (x *MarkMessagesReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_chat_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkMessagesReadReq.ProtoReflect.Descriptor instead.
func (*MarkMessagesReadReq) Descriptor() ([]byte, []int) {
	return file_pkg_proto_chat_chat_proto_rawDescGZIP(), []int{1}
}

func (x *MarkMessagesReadReq) GetChatId() int32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *MarkMessagesReadReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type ChatResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CreationTime         *timestamp.Timestamp `protobuf:"bytes,2,opt,name=CreationTime,proto3" json:"CreationTime,omitempty"`
	LastMsgContent       string               `protobuf:"bytes,3,opt,name=LastMsgContent,proto3" json:"LastMsgContent,omitempty"`
	LastMsgUsername      string               `protobuf:"bytes,4,opt,name=LastMsgUsername,proto3" json:"LastMsgUsername,omitempty"`
	LastMsgTime          *timestamp.Timestamp `protobuf:"bytes,5,opt,name=LastMsgTime,proto3" json:"LastMsgTime,omitempty"`
	CollocutorName       string               `protobuf:"bytes,6,opt,name=CollocutorName,proto3" json:"CollocutorName,omitempty"`
	CollocutorAvatarLink string               `protobuf:"bytes,7,opt,name=CollocutorAvatarLink,proto3" json:"CollocutorAvatarLink,omitempty"`
	NewMessages          int32                `protobuf:"varint,8,opt,name=NewMessages,proto3" json:"NewMessages,omitempty"`
}

func (x *ChatResp) Reset() {
	*x = ChatResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_chat_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatResp) ProtoMessage() {}

func (x *ChatResp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_chat_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatResp.ProtoReflect.Descriptor instead.
func (*ChatResp) Descriptor() ([]byte, []int) {
	return file_pkg_proto_chat_chat_proto_rawDescGZIP(), []int{2}
}

func (x *ChatResp) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChatResp) GetCreationTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ChatResp) GetLastMsgContent() string {
	if x != nil {
		return x.LastMsgContent
	}
	return ""
}

func (x *ChatResp) GetLastMsgUsername() string {
	if x != nil {
		return x.LastMsgUsername
	}
	return ""
}

func (x *ChatResp) GetLastMsgTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastMsgTime
	}
	return nil
}

func (x *ChatResp) GetCollocutorName() string {
	if x != nil {
		return x.CollocutorName
	}
	return ""
}

func (x *ChatResp) GetCollocutorAvatarLink() string {
	if x != nil {
		return x.CollocutorAvatarLink
	}
	return ""
}

func (x *ChatResp) GetNewMessages() int32 {
	if x != nil {
		return x.NewMessages
	}
	return 0
}

type WsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *WsMessage) Reset() {
	*x = WsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_chat_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WsMessage) ProtoMessage() {}

func (x *WsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_chat_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WsMessage.ProtoReflect.Descriptor instead.
func (*WsMessage) Descriptor() ([]byte, []int) {
	return file_pkg_proto_chat_chat_proto_rawDescGZIP(), []int{3}
}

func (x *WsMessage) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WsMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_pkg_proto_chat_chat_proto protoreflect.FileDescriptor

var file_pkg_proto_chat_chat_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x61, 0x74,
	0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x68, 0x61,
	0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x53, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x6f, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x6f, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x13, 0x4d, 0x61, 0x72, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x73, 0x67, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x6f, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x6f, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6c, 0x6f,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x43, 0x6f, 0x6c, 0x6c, 0x6f, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x4e,
	0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x37, 0x0a,
	0x09, 0x57, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x32, 0xaf, 0x01, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x33, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x13, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x57, 0x73,
	0x12, 0x0f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x57, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x0f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x57, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x61, 0x72, 0x6b, 0x2d, 0x6d,
	0x61, 0x69, 0x6c, 0x2d, 0x72, 0x75, 0x2f, 0x32, 0x30, 0x32, 0x30, 0x5f, 0x32, 0x5f, 0x45, 0x74,
	0x65, 0x72, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_chat_chat_proto_rawDescOnce sync.Once
	file_pkg_proto_chat_chat_proto_rawDescData = file_pkg_proto_chat_chat_proto_rawDesc
)

func file_pkg_proto_chat_chat_proto_rawDescGZIP() []byte {
	file_pkg_proto_chat_chat_proto_rawDescOnce.Do(func() {
		file_pkg_proto_chat_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_chat_chat_proto_rawDescData)
	})
	return file_pkg_proto_chat_chat_proto_rawDescData
}

var file_pkg_proto_chat_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_proto_chat_chat_proto_goTypes = []interface{}{
	(*ChatCreateReq)(nil),       // 0: chat.ChatCreateReq
	(*MarkMessagesReadReq)(nil), // 1: chat.MarkMessagesReadReq
	(*ChatResp)(nil),            // 2: chat.ChatResp
	(*WsMessage)(nil),           // 3: chat.WsMessage
	(*timestamp.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_pkg_proto_chat_chat_proto_depIdxs = []int32{
	4, // 0: chat.ChatResp.CreationTime:type_name -> google.protobuf.Timestamp
	4, // 1: chat.ChatResp.LastMsgTime:type_name -> google.protobuf.Timestamp
	0, // 2: chat.Chat.CreateChat:input_type -> chat.ChatCreateReq
	1, // 3: chat.Chat.MarkMessagesRead:input_type -> chat.MarkMessagesReadReq
	3, // 4: chat.Chat.RouteWs:input_type -> chat.WsMessage
	2, // 5: chat.Chat.CreateChat:output_type -> chat.ChatResp
	2, // 6: chat.Chat.MarkMessagesRead:output_type -> chat.ChatResp
	3, // 7: chat.Chat.RouteWs:output_type -> chat.WsMessage
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pkg_proto_chat_chat_proto_init() }
func file_pkg_proto_chat_chat_proto_init() {
	if File_pkg_proto_chat_chat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_proto_chat_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_chat_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkMessagesReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_chat_chat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_chat_chat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_chat_chat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_proto_chat_chat_proto_goTypes,
		DependencyIndexes: file_pkg_proto_chat_chat_proto_depIdxs,
		MessageInfos:      file_pkg_proto_chat_chat_proto_msgTypes,
	}.Build()
	File_pkg_proto_chat_chat_proto = out.File
	file_pkg_proto_chat_chat_proto_rawDesc = nil
	file_pkg_proto_chat_chat_proto_goTypes = nil
	file_pkg_proto_chat_chat_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatClient interface {
	CreateChat(ctx context.Context, in *ChatCreateReq, opts ...grpc.CallOption) (*ChatResp, error)
	MarkMessagesRead(ctx context.Context, in *MarkMessagesReadReq, opts ...grpc.CallOption) (*ChatResp, error)
	RouteWs(ctx context.Context, opts ...grpc.CallOption) (Chat_RouteWsClient, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) CreateChat(ctx context.Context, in *ChatCreateReq, opts ...grpc.CallOption) (*ChatResp, error) {
	out := new(ChatResp)
	err := c.cc.Invoke(ctx, "/chat.Chat/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) MarkMessagesRead(ctx context.Context, in *MarkMessagesReadReq, opts ...grpc.CallOption) (*ChatResp, error) {
	out := new(ChatResp)
	err := c.cc.Invoke(ctx, "/chat.Chat/MarkMessagesRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) RouteWs(ctx context.Context, opts ...grpc.CallOption) (Chat_RouteWsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chat_serviceDesc.Streams[0], "/chat.Chat/RouteWs", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatRouteWsClient{stream}
	return x, nil
}

type Chat_RouteWsClient interface {
	Send(*WsMessage) error
	Recv() (*WsMessage, error)
	grpc.ClientStream
}

type chatRouteWsClient struct {
	grpc.ClientStream
}

func (x *chatRouteWsClient) Send(m *WsMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatRouteWsClient) Recv() (*WsMessage, error) {
	m := new(WsMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer is the server API for Chat service.
type ChatServer interface {
	CreateChat(context.Context, *ChatCreateReq) (*ChatResp, error)
	MarkMessagesRead(context.Context, *MarkMessagesReadReq) (*ChatResp, error)
	RouteWs(Chat_RouteWsServer) error
}

// UnimplementedChatServer can be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (*UnimplementedChatServer) CreateChat(context.Context, *ChatCreateReq) (*ChatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (*UnimplementedChatServer) MarkMessagesRead(context.Context, *MarkMessagesReadReq) (*ChatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkMessagesRead not implemented")
}
func (*UnimplementedChatServer) RouteWs(Chat_RouteWsServer) error {
	return status.Errorf(codes.Unimplemented, "method RouteWs not implemented")
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CreateChat(ctx, req.(*ChatCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_MarkMessagesRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkMessagesReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).MarkMessagesRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chat/MarkMessagesRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).MarkMessagesRead(ctx, req.(*MarkMessagesReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_RouteWs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).RouteWs(&chatRouteWsServer{stream})
}

type Chat_RouteWsServer interface {
	Send(*WsMessage) error
	Recv() (*WsMessage, error)
	grpc.ServerStream
}

type chatRouteWsServer struct {
	grpc.ServerStream
}

func (x *chatRouteWsServer) Send(m *WsMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatRouteWsServer) Recv() (*WsMessage, error) {
	m := new(WsMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _Chat_CreateChat_Handler,
		},
		{
			MethodName: "MarkMessagesRead",
			Handler:    _Chat_MarkMessagesRead_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RouteWs",
			Handler:       _Chat_RouteWs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/proto/chat/chat.proto",
}
