// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/comment/model.go

// Package mock_comment is a generated GoMock package.
package mock_comment

import (
	comment "github.com/go-park-mail-ru/2020_2_Eternity/pkg/comment"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepoComment is a mock of RepoComment interface
type MockRepoComment struct {
	ctrl     *gomock.Controller
	recorder *MockRepoCommentMockRecorder
}

// MockRepoCommentMockRecorder is the mock recorder for MockRepoComment
type MockRepoCommentMockRecorder struct {
	mock *MockRepoComment
}

// NewMockRepoComment creates a new mock instance
func NewMockRepoComment(ctrl *gomock.Controller) *MockRepoComment {
	mock := &MockRepoComment{ctrl: ctrl}
	mock.recorder = &MockRepoCommentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoComment) EXPECT() *MockRepoCommentMockRecorder {
	return m.recorder
}

// CreateChildComment mocks base method
func (m *MockRepoComment) CreateChildComment(c *comment.Comment, parentId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChildComment", c, parentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChildComment indicates an expected call of CreateChildComment
func (mr *MockRepoCommentMockRecorder) CreateChildComment(c, parentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChildComment", reflect.TypeOf((*MockRepoComment)(nil).CreateChildComment), c, parentId)
}

// CreateRootComment mocks base method
func (m *MockRepoComment) CreateRootComment(c *comment.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRootComment", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRootComment indicates an expected call of CreateRootComment
func (mr *MockRepoCommentMockRecorder) CreateRootComment(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRootComment", reflect.TypeOf((*MockRepoComment)(nil).CreateRootComment), c)
}

// GetComment mocks base method
func (m *MockRepoComment) GetComment(id int) (comment.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", id)
	ret0, _ := ret[0].(comment.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment
func (mr *MockRepoCommentMockRecorder) GetComment(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockRepoComment)(nil).GetComment), id)
}

// GetAllComments mocks base method
func (m *MockRepoComment) GetAllComments(pinId int) ([]comment.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllComments", pinId)
	ret0, _ := ret[0].([]comment.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllComments indicates an expected call of GetAllComments
func (mr *MockRepoCommentMockRecorder) GetAllComments(pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllComments", reflect.TypeOf((*MockRepoComment)(nil).GetAllComments), pinId)
}
