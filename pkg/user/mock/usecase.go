// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/user/usecase.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	api "github.com/go-park-mail-ru/2020_2_Eternity/api"
	domain "github.com/go-park-mail-ru/2020_2_Eternity/pkg/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUsecase is a mock of IUsecase interface
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method
func (m *MockIUsecase) CreateUser(user *api.SignUp) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockIUsecaseMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUsecase)(nil).CreateUser), user)
}

// GetUser mocks base method
func (m *MockIUsecase) GetUser(id int) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockIUsecaseMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUsecase)(nil).GetUser), id)
}

// GetUserByName mocks base method
func (m *MockIUsecase) GetUserByName(username string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", username)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName
func (mr *MockIUsecaseMockRecorder) GetUserByName(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockIUsecase)(nil).GetUserByName), username)
}

// GetUserByNameWithFollowers mocks base method
func (m *MockIUsecase) GetUserByNameWithFollowers(username string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByNameWithFollowers", username)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByNameWithFollowers indicates an expected call of GetUserByNameWithFollowers
func (mr *MockIUsecaseMockRecorder) GetUserByNameWithFollowers(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByNameWithFollowers", reflect.TypeOf((*MockIUsecase)(nil).GetUserByNameWithFollowers), username)
}

// UpdateUser mocks base method
func (m *MockIUsecase) UpdateUser(id int, profile *api.UpdateUser) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", id, profile)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockIUsecaseMockRecorder) UpdateUser(id, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUsecase)(nil).UpdateUser), id, profile)
}

// UpdatePassword mocks base method
func (m *MockIUsecase) UpdatePassword(id int, psswd string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", id, psswd)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword
func (mr *MockIUsecaseMockRecorder) UpdatePassword(id, psswd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockIUsecase)(nil).UpdatePassword), id, psswd)
}

// UpdateAvatar mocks base method
func (m *MockIUsecase) UpdateAvatar(id int, avatar string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", id, avatar)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAvatar indicates an expected call of UpdateAvatar
func (mr *MockIUsecaseMockRecorder) UpdateAvatar(id, avatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockIUsecase)(nil).UpdateAvatar), id, avatar)
}

// GetAvatar mocks base method
func (m *MockIUsecase) GetAvatar(id int) (error, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", id)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar
func (mr *MockIUsecaseMockRecorder) GetAvatar(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockIUsecase)(nil).GetAvatar), id)
}

// Follow mocks base method
func (m *MockIUsecase) Follow(following, id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", following, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Follow indicates an expected call of Follow
func (mr *MockIUsecaseMockRecorder) Follow(following, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockIUsecase)(nil).Follow), following, id)
}

// UnFollow mocks base method
func (m *MockIUsecase) UnFollow(unfollowing, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnFollow", unfollowing, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnFollow indicates an expected call of UnFollow
func (mr *MockIUsecaseMockRecorder) UnFollow(unfollowing, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnFollow", reflect.TypeOf((*MockIUsecase)(nil).UnFollow), unfollowing, id)
}

// GetFollowers mocks base method
func (m *MockIUsecase) GetFollowers(username string) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowers", username)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowers indicates an expected call of GetFollowers
func (mr *MockIUsecaseMockRecorder) GetFollowers(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowers", reflect.TypeOf((*MockIUsecase)(nil).GetFollowers), username)
}

// GetFollowing mocks base method
func (m *MockIUsecase) GetFollowing(username string) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowing", username)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowing indicates an expected call of GetFollowing
func (mr *MockIUsecaseMockRecorder) GetFollowing(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowing", reflect.TypeOf((*MockIUsecase)(nil).GetFollowing), username)
}

// IsFollowing mocks base method
func (m *MockIUsecase) IsFollowing(id int, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFollowing", id, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsFollowing indicates an expected call of IsFollowing
func (mr *MockIUsecaseMockRecorder) IsFollowing(id, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFollowing", reflect.TypeOf((*MockIUsecase)(nil).IsFollowing), id, username)
}

// GetPopularUsers mocks base method
func (m *MockIUsecase) GetPopularUsers(limit int) ([]domain.UserSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopularUsers", limit)
	ret0, _ := ret[0].([]domain.UserSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopularUsers indicates an expected call of GetPopularUsers
func (mr *MockIUsecaseMockRecorder) GetPopularUsers(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopularUsers", reflect.TypeOf((*MockIUsecase)(nil).GetPopularUsers), limit)
}
