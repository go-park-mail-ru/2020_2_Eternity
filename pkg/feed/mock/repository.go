// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_feed is a generated GoMock package.
package mock_feed

import (
	domain "github.com/go-park-mail-ru/2020_2_Eternity/pkg/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIRepository is a mock of IRepository interface
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// GetFeed mocks base method
func (m *MockIRepository) GetFeed(userId, last int) ([]domain.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", userId, last)
	ret0, _ := ret[0].([]domain.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed
func (mr *MockIRepositoryMockRecorder) GetFeed(userId, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockIRepository)(nil).GetFeed), userId, last)
}

// GetSubFeed mocks base method
func (m *MockIRepository) GetSubFeed(userId, last int) ([]domain.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubFeed", userId, last)
	ret0, _ := ret[0].([]domain.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubFeed indicates an expected call of GetSubFeed
func (mr *MockIRepositoryMockRecorder) GetSubFeed(userId, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubFeed", reflect.TypeOf((*MockIRepository)(nil).GetSubFeed), userId, last)
}
