// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_search is a generated GoMock package.
package mock_search

import (
	domain "github.com/go-park-mail-ru/2020_2_Eternity/pkg/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUsecase is a mock of IUsecase interface
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// GetUsersByName mocks base method
func (m *MockIUsecase) GetUsersByName(username string, last int) ([]domain.UserSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByName", username, last)
	ret0, _ := ret[0].([]domain.UserSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByName indicates an expected call of GetUsersByName
func (mr *MockIUsecaseMockRecorder) GetUsersByName(username, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByName", reflect.TypeOf((*MockIUsecase)(nil).GetUsersByName), username, last)
}

// GetPinsByTitle mocks base method
func (m *MockIUsecase) GetPinsByTitle(title string, last int) ([]domain.PinResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPinsByTitle", title, last)
	ret0, _ := ret[0].([]domain.PinResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPinsByTitle indicates an expected call of GetPinsByTitle
func (mr *MockIUsecaseMockRecorder) GetPinsByTitle(title, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPinsByTitle", reflect.TypeOf((*MockIUsecase)(nil).GetPinsByTitle), title, last)
}
