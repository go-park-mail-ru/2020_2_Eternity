// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_board is a generated GoMock package.
package mock_board

import (
	api "github.com/go-park-mail-ru/2020_2_Eternity/api"
	domain "github.com/go-park-mail-ru/2020_2_Eternity/pkg/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUsecase is a mock of IUsecase interface
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// CreateBoard mocks base method
func (m *MockIUsecase) CreateBoard(userId int, b *api.CreateBoard) (*domain.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoard", userId, b)
	ret0, _ := ret[0].(*domain.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBoard indicates an expected call of CreateBoard
func (mr *MockIUsecaseMockRecorder) CreateBoard(userId, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoard", reflect.TypeOf((*MockIUsecase)(nil).CreateBoard), userId, b)
}

// GetBoard mocks base method
func (m *MockIUsecase) GetBoard(id int) (*domain.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoard", id)
	ret0, _ := ret[0].(*domain.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoard indicates an expected call of GetBoard
func (mr *MockIUsecaseMockRecorder) GetBoard(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoard", reflect.TypeOf((*MockIUsecase)(nil).GetBoard), id)
}

// GetAllBoardsByUser mocks base method
func (m *MockIUsecase) GetAllBoardsByUser(username string) ([]domain.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBoardsByUser", username)
	ret0, _ := ret[0].([]domain.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBoardsByUser indicates an expected call of GetAllBoardsByUser
func (mr *MockIUsecaseMockRecorder) GetAllBoardsByUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBoardsByUser", reflect.TypeOf((*MockIUsecase)(nil).GetAllBoardsByUser), username)
}

// CheckOwner mocks base method
func (m *MockIUsecase) CheckOwner(userId, boardId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOwner", userId, boardId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckOwner indicates an expected call of CheckOwner
func (mr *MockIUsecaseMockRecorder) CheckOwner(userId, boardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOwner", reflect.TypeOf((*MockIUsecase)(nil).CheckOwner), userId, boardId)
}

// AttachPin mocks base method
func (m *MockIUsecase) AttachPin(boardId, pinId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachPin", boardId, pinId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachPin indicates an expected call of AttachPin
func (mr *MockIUsecaseMockRecorder) AttachPin(boardId, pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachPin", reflect.TypeOf((*MockIUsecase)(nil).AttachPin), boardId, pinId)
}

// DetachPin mocks base method
func (m *MockIUsecase) DetachPin(boardId, pinId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachPin", boardId, pinId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachPin indicates an expected call of DetachPin
func (mr *MockIUsecaseMockRecorder) DetachPin(boardId, pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachPin", reflect.TypeOf((*MockIUsecase)(nil).DetachPin), boardId, pinId)
}

// GetBoardsPinNotAttach mocks base method
func (m *MockIUsecase) GetBoardsPinNotAttach(userId, pinId int) ([]domain.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardsPinNotAttach", userId, pinId)
	ret0, _ := ret[0].([]domain.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardsPinNotAttach indicates an expected call of GetBoardsPinNotAttach
func (mr *MockIUsecaseMockRecorder) GetBoardsPinNotAttach(userId, pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardsPinNotAttach", reflect.TypeOf((*MockIUsecase)(nil).GetBoardsPinNotAttach), userId, pinId)
}
