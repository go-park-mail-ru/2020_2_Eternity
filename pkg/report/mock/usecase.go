// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_report is a generated GoMock package.
package mock_report

import (
	domain "github.com/go-park-mail-ru/2020_2_Eternity/pkg/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUsecase is a mock of IUsecase interface
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// ReportPin mocks base method
func (m *MockIUsecase) ReportPin(userId int, rep *domain.ReportReq) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportPin", userId, rep)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportPin indicates an expected call of ReportPin
func (mr *MockIUsecaseMockRecorder) ReportPin(userId, rep interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportPin", reflect.TypeOf((*MockIUsecase)(nil).ReportPin), userId, rep)
}

// GetReportsByPinId mocks base method
func (m *MockIUsecase) GetReportsByPinId(pinId int) ([]domain.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportsByPinId", pinId)
	ret0, _ := ret[0].([]domain.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportsByPinId indicates an expected call of GetReportsByPinId
func (mr *MockIUsecaseMockRecorder) GetReportsByPinId(pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportsByPinId", reflect.TypeOf((*MockIUsecase)(nil).GetReportsByPinId), pinId)
}

// GetReportsByUsername mocks base method
func (m *MockIUsecase) GetReportsByUsername(username string) ([]domain.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportsByUsername", username)
	ret0, _ := ret[0].([]domain.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportsByUsername indicates an expected call of GetReportsByUsername
func (mr *MockIUsecaseMockRecorder) GetReportsByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportsByUsername", reflect.TypeOf((*MockIUsecase)(nil).GetReportsByUsername), username)
}
