// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE9abebc9DecodeGithubComGoParkMailRu20202EternityPkgDomain(in *jlexer.Lexer, out *CommentResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make([]int32, 0, 16)
					} else {
						out.Path = []int32{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int32
					v1 = int32(in.Int32())
					out.Path = append(out.Path, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "content":
			out.Content = string(in.String())
		case "pin_id":
			out.PinId = int(in.Int())
		case "user_id":
			out.UserId = int(in.Int())
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeGithubComGoParkMailRu20202EternityPkgDomain(out *jwriter.Writer, in CommentResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		if in.Path == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Path {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"pin_id\":"
		out.RawString(prefix)
		out.Int(int(in.PinId))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202EternityPkgDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202EternityPkgDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202EternityPkgDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202EternityPkgDomain(l, v)
}
func easyjsonE9abebc9DecodeGithubComGoParkMailRu20202EternityPkgDomain1(in *jlexer.Lexer, out *CommentCreateReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_root":
			out.IsRoot = bool(in.Bool())
		case "parent_id":
			out.ParentId = int(in.Int())
		case "content":
			out.Content = string(in.String())
		case "pin_id":
			out.PinId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeGithubComGoParkMailRu20202EternityPkgDomain1(out *jwriter.Writer, in CommentCreateReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"is_root\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsRoot))
	}
	{
		const prefix string = ",\"parent_id\":"
		out.RawString(prefix)
		out.Int(int(in.ParentId))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"pin_id\":"
		out.RawString(prefix)
		out.Int(int(in.PinId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentCreateReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202EternityPkgDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentCreateReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202EternityPkgDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentCreateReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202EternityPkgDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentCreateReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202EternityPkgDomain1(l, v)
}
func easyjsonE9abebc9DecodeGithubComGoParkMailRu20202EternityPkgDomain2(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = int(in.Int())
		case "Path":
			if in.IsNull() {
				in.Skip()
				out.Path = nil
			} else {
				in.Delim('[')
				if out.Path == nil {
					if !in.IsDelim(']') {
						out.Path = make([]int32, 0, 16)
					} else {
						out.Path = []int32{}
					}
				} else {
					out.Path = (out.Path)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int32
					v4 = int32(in.Int32())
					out.Path = append(out.Path, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Content":
			out.Content = string(in.String())
		case "PinId":
			out.PinId = int(in.Int())
		case "UserId":
			out.UserId = int(in.Int())
		case "Username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeGithubComGoParkMailRu20202EternityPkgDomain2(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"Path\":"
		out.RawString(prefix)
		if in.Path == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Path {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"PinId\":"
		out.RawString(prefix)
		out.Int(int(in.PinId))
	}
	{
		const prefix string = ",\"UserId\":"
		out.RawString(prefix)
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202EternityPkgDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeGithubComGoParkMailRu20202EternityPkgDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202EternityPkgDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeGithubComGoParkMailRu20202EternityPkgDomain2(l, v)
}
