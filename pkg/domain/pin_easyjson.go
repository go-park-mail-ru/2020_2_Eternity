// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD6aedbb7DecodeGithubComGoParkMailRu20202EternityPkgDomain(in *jlexer.Lexer, out *PinResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "content":
			out.Content = string(in.String())
		case "height":
			out.PictureHeight = int(in.Int())
		case "width":
			out.PictureWidth = int(in.Int())
		case "img_link":
			out.ImgLink = string(in.String())
		case "user_id":
			out.UserId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD6aedbb7EncodeGithubComGoParkMailRu20202EternityPkgDomain(out *jwriter.Writer, in PinResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	if in.PictureHeight != 0 {
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.PictureHeight))
	}
	if in.PictureWidth != 0 {
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.PictureWidth))
	}
	{
		const prefix string = ",\"img_link\":"
		out.RawString(prefix)
		out.String(string(in.ImgLink))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PinResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD6aedbb7EncodeGithubComGoParkMailRu20202EternityPkgDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PinResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD6aedbb7EncodeGithubComGoParkMailRu20202EternityPkgDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PinResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD6aedbb7DecodeGithubComGoParkMailRu20202EternityPkgDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PinResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD6aedbb7DecodeGithubComGoParkMailRu20202EternityPkgDomain(l, v)
}
func easyjsonD6aedbb7DecodeGithubComGoParkMailRu20202EternityPkgDomain1(in *jlexer.Lexer, out *PinReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD6aedbb7EncodeGithubComGoParkMailRu20202EternityPkgDomain1(out *jwriter.Writer, in PinReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PinReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD6aedbb7EncodeGithubComGoParkMailRu20202EternityPkgDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PinReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD6aedbb7EncodeGithubComGoParkMailRu20202EternityPkgDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PinReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD6aedbb7DecodeGithubComGoParkMailRu20202EternityPkgDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PinReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD6aedbb7DecodeGithubComGoParkMailRu20202EternityPkgDomain1(l, v)
}
func easyjsonD6aedbb7DecodeGithubComGoParkMailRu20202EternityPkgDomain2(in *jlexer.Lexer, out *PinEditReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD6aedbb7EncodeGithubComGoParkMailRu20202EternityPkgDomain2(out *jwriter.Writer, in PinEditReq) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PinEditReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD6aedbb7EncodeGithubComGoParkMailRu20202EternityPkgDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PinEditReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD6aedbb7EncodeGithubComGoParkMailRu20202EternityPkgDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PinEditReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD6aedbb7DecodeGithubComGoParkMailRu20202EternityPkgDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PinEditReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD6aedbb7DecodeGithubComGoParkMailRu20202EternityPkgDomain2(l, v)
}
func easyjsonD6aedbb7DecodeGithubComGoParkMailRu20202EternityPkgDomain3(in *jlexer.Lexer, out *Pin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "content":
			out.Content = string(in.String())
		case "picture_name":
			out.PictureName = string(in.String())
		case "height":
			out.PictureHeight = int(in.Int())
		case "width":
			out.PictureWidth = int(in.Int())
		case "user_id":
			out.UserId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD6aedbb7EncodeGithubComGoParkMailRu20202EternityPkgDomain3(out *jwriter.Writer, in Pin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"picture_name\":"
		out.RawString(prefix)
		out.String(string(in.PictureName))
	}
	if in.PictureHeight != 0 {
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.PictureHeight))
	}
	if in.PictureWidth != 0 {
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.PictureWidth))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD6aedbb7EncodeGithubComGoParkMailRu20202EternityPkgDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD6aedbb7EncodeGithubComGoParkMailRu20202EternityPkgDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD6aedbb7DecodeGithubComGoParkMailRu20202EternityPkgDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD6aedbb7DecodeGithubComGoParkMailRu20202EternityPkgDomain3(l, v)
}
